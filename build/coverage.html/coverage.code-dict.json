{"/home/travis/build/npmtest/node-npmtest-angular2-oauth2/test.js":"/* istanbul instrument in package npmtest_angular2_oauth2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-angular2-oauth2/lib.npmtest_angular2_oauth2.js":"/* istanbul instrument in package npmtest_angular2_oauth2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_angular2_oauth2 = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_angular2_oauth2 = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-angular2-oauth2/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-angular2-oauth2 && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_angular2_oauth2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_angular2_oauth2\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_angular2_oauth2.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_angular2_oauth2.rollup.js'] =\n            local.assetsDict['/assets.npmtest_angular2_oauth2.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_angular2_oauth2.__dirname + '/lib.npmtest_angular2_oauth2.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-angular2-oauth2/node_modules/angular2-oauth2/oauth-service.js":"\"use strict\";\r\nvar js_base64_1 = require('js-base64');\r\nvar base64_js_1 = require('base64-js');\r\nvar _sha256 = require('sha256');\r\nvar sha256 = _sha256;\r\nvar OAuthService = (function () {\r\n    function OAuthService() {\r\n        this.clientId = \"\";\r\n        this.redirectUri = \"\";\r\n        this.loginUrl = \"\";\r\n        this.scope = \"\";\r\n        this.rngUrl = \"\";\r\n        this.oidc = false;\r\n        this.state = \"\";\r\n        this.issuer = \"\";\r\n        this.logoutUrl = \"\";\r\n        this._storage = localStorage;\r\n    }\r\n    OAuthService.prototype.setStorage = function (storage) {\r\n        this._storage = storage;\r\n    };\r\n    OAuthService.prototype.createLoginUrl = function (state) {\r\n        var that = this;\r\n        if (typeof state === \"undefined\") {\r\n            state = \"\";\r\n        }\r\n        return this.createAndSaveNonce().then(function (nonce) {\r\n            if (state) {\r\n                state = nonce + \";\" + state;\r\n            }\r\n            else {\r\n                state = nonce;\r\n            }\r\n            var response_type = \"token\";\r\n            if (that.oidc) {\r\n                response_type = \"id_token+token\";\r\n            }\r\n            var url = that.loginUrl\r\n                + \"?response_type=\"\r\n                + response_type\r\n                + \"&client_id=\"\r\n                + encodeURIComponent(that.clientId)\r\n                + \"&state=\"\r\n                + encodeURIComponent(state)\r\n                + \"&redirect_uri=\"\r\n                + encodeURIComponent(that.redirectUri)\r\n                + \"&scope=\"\r\n                + encodeURIComponent(that.scope);\r\n            if (that.oidc) {\r\n                url += \"&nonce=\" + encodeURIComponent(nonce);\r\n            }\r\n            return url;\r\n        });\r\n    };\r\n    ;\r\n    OAuthService.prototype.initImplicitFlow = function (additionalState) {\r\n        if (additionalState === void 0) { additionalState = \"\"; }\r\n        this.createLoginUrl(additionalState).then(function (url) {\r\n            location.href = url;\r\n        })\r\n            .catch(function (error) {\r\n            console.error(\"Error in initImplicitFlow\");\r\n            console.error(error);\r\n        });\r\n    };\r\n    ;\r\n    OAuthService.prototype.callEventIfExists = function (options) {\r\n        var that = this;\r\n        if (options.onTokenReceived) {\r\n            var tokenParams = {\r\n                idClaims: that.getIdentityClaims(),\r\n                idToken: that.getIdToken(),\r\n                accessToken: that.getAccessToken(),\r\n                state: that.state\r\n            };\r\n            options.onTokenReceived(tokenParams);\r\n        }\r\n    };\r\n    OAuthService.prototype.tryLogin = function (options) {\r\n        var _this = this;\r\n        options = options || {};\r\n        var parts = this.getFragment();\r\n        var accessToken = parts[\"access_token\"];\r\n        var idToken = parts[\"id_token\"];\r\n        var state = parts[\"state\"];\r\n        var oidcSuccess = false;\r\n        var oauthSuccess = false;\r\n        if (!accessToken || !state)\r\n            return false;\r\n        if (this.oidc && !idToken)\r\n            return false;\r\n        var savedNonce = this._storage.getItem(\"nonce\");\r\n        var stateParts = state.split(';');\r\n        var nonceInState = stateParts[0];\r\n        if (savedNonce === nonceInState) {\r\n            this._storage.setItem(\"access_token\", accessToken);\r\n            var expiresIn = parts[\"expires_in\"];\r\n            if (expiresIn) {\r\n                var expiresInMilliSeconds = parseInt(expiresIn) * 1000;\r\n                var now = new Date();\r\n                var expiresAt = now.getTime() + expiresInMilliSeconds;\r\n                this._storage.setItem(\"expires_at\", \"\" + expiresAt);\r\n            }\r\n            if (stateParts.length > 1) {\r\n                this.state = stateParts[1];\r\n            }\r\n            oauthSuccess = true;\r\n        }\r\n        if (!oauthSuccess)\r\n            return false;\r\n        if (!this.oidc && options.onTokenReceived) {\r\n            options.onTokenReceived({ accessToken: accessToken });\r\n        }\r\n        if (this.oidc) {\r\n            oidcSuccess = this.processIdToken(idToken, accessToken);\r\n            if (!oidcSuccess)\r\n                return false;\r\n        }\r\n        if (options.validationHandler) {\r\n            var validationParams = { accessToken: accessToken, idToken: idToken };\r\n            options\r\n                .validationHandler(validationParams)\r\n                .then(function () {\r\n                _this.callEventIfExists(options);\r\n            })\r\n                .catch(function (reason) {\r\n                console.error('Error validating tokens');\r\n                console.error(reason);\r\n            });\r\n        }\r\n        else {\r\n            this.callEventIfExists(options);\r\n        }\r\n        return true;\r\n    };\r\n    ;\r\n    OAuthService.prototype.processIdToken = function (idToken, accessToken) {\r\n        var tokenParts = idToken.split(\".\");\r\n        var claimsBase64 = this.padBase64(tokenParts[1]);\r\n        var claimsJson = js_base64_1.Base64.decode(claimsBase64);\r\n        var claims = JSON.parse(claimsJson);\r\n        var savedNonce = this._storage.getItem(\"nonce\");\r\n        if (claims.aud !== this.clientId) {\r\n            console.warn(\"Wrong audience: \" + claims.aud);\r\n            return false;\r\n        }\r\n        if (this.issuer && claims.iss !== this.issuer) {\r\n            console.warn(\"Wrong issuer: \" + claims.iss);\r\n            return false;\r\n        }\r\n        if (claims.nonce !== savedNonce) {\r\n            console.warn(\"Wrong nonce: \" + claims.nonce);\r\n            return false;\r\n        }\r\n        if (accessToken && !this.checkAtHash(accessToken, claims)) {\r\n            console.warn(\"Wrong at_hash\");\r\n            return false;\r\n        }\r\n        var now = Date.now();\r\n        var issuedAtMSec = claims.iat * 1000;\r\n        var expiresAtMSec = claims.exp * 1000;\r\n        var tenMinutesInMsec = 1000 * 60 * 10;\r\n        if (issuedAtMSec - tenMinutesInMsec >= now || expiresAtMSec + tenMinutesInMsec <= now) {\r\n            console.warn(\"Token has been expired\");\r\n            console.warn({\r\n                now: now,\r\n                issuedAtMSec: issuedAtMSec,\r\n                expiresAtMSec: expiresAtMSec\r\n            });\r\n            return false;\r\n        }\r\n        this._storage.setItem(\"id_token\", idToken);\r\n        this._storage.setItem(\"id_token_claims_obj\", claimsJson);\r\n        this._storage.setItem(\"id_token_expires_at\", \"\" + expiresAtMSec);\r\n        if (this.validationHandler) {\r\n            this.validationHandler(idToken);\r\n        }\r\n        return true;\r\n    };\r\n    OAuthService.prototype.getIdentityClaims = function () {\r\n        var claims = this._storage.getItem(\"id_token_claims_obj\");\r\n        if (!claims)\r\n            return null;\r\n        return JSON.parse(claims);\r\n    };\r\n    OAuthService.prototype.getIdToken = function () {\r\n        return this._storage.getItem(\"id_token\");\r\n    };\r\n    OAuthService.prototype.padBase64 = function (base64data) {\r\n        while (base64data.length % 4 !== 0) {\r\n            base64data += \"=\";\r\n        }\r\n        return base64data;\r\n    };\r\n    OAuthService.prototype.tryLoginWithIFrame = function () {\r\n        throw new Error(\"tryLoginWithIFrame has not been implemented so far\");\r\n    };\r\n    ;\r\n    OAuthService.prototype.tryRefresh = function (timeoutInMsec) {\r\n        throw new Error(\"tryRefresh has not been implemented so far\");\r\n    };\r\n    ;\r\n    OAuthService.prototype.getAccessToken = function () {\r\n        return this._storage.getItem(\"access_token\");\r\n    };\r\n    ;\r\n    OAuthService.prototype.hasValidAccessToken = function () {\r\n        if (this.getAccessToken()) {\r\n            var expiresAt = this._storage.getItem(\"expires_at\");\r\n            var now = new Date();\r\n            if (expiresAt && parseInt(expiresAt) < now.getTime()) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    ;\r\n    OAuthService.prototype.hasValidIdToken = function () {\r\n        if (this.getIdToken) {\r\n            var expiresAt = this._storage.getItem(\"id_token_expires_at\");\r\n            var now = new Date();\r\n            if (expiresAt && parseInt(expiresAt) < now.getTime()) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    ;\r\n    OAuthService.prototype.authorizationHeader = function () {\r\n        return \"Bearer \" + this.getAccessToken();\r\n    };\r\n    OAuthService.prototype.logOut = function () {\r\n        var id_token = this.getIdToken();\r\n        this._storage.removeItem(\"access_token\");\r\n        this._storage.removeItem(\"id_token\");\r\n        this._storage.removeItem(\"nonce\");\r\n        this._storage.removeItem(\"expires_at\");\r\n        this._storage.removeItem(\"id_token_claims_obj\");\r\n        this._storage.removeItem(\"id_token_expires_at\");\r\n        if (!this.logoutUrl)\r\n            return;\r\n        var logoutUrl = this.logoutUrl.replace(/\\{\\{id_token\\}\\}/, id_token);\r\n        location.href = logoutUrl;\r\n    };\r\n    ;\r\n    OAuthService.prototype.createAndSaveNonce = function () {\r\n        var that = this;\r\n        return this.createNonce().then(function (nonce) {\r\n            that._storage.setItem(\"nonce\", nonce);\r\n            return nonce;\r\n        });\r\n    };\r\n    ;\r\n    OAuthService.prototype.createNonce = function () {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            if (_this.rngUrl) {\r\n                throw new Error(\"createNonce with rng-web-api has not been implemented so far\");\r\n            }\r\n            else {\r\n                var text = \"\";\r\n                var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n                for (var i = 0; i < 40; i++)\r\n                    text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n                resolve(text);\r\n            }\r\n        });\r\n    };\r\n    ;\r\n    OAuthService.prototype.getFragment = function () {\r\n        if (window.location.hash.indexOf(\"#\") === 0) {\r\n            return this.parseQueryString(window.location.hash.substr(1));\r\n        }\r\n        else {\r\n            return {};\r\n        }\r\n    };\r\n    ;\r\n    OAuthService.prototype.parseQueryString = function (queryString) {\r\n        var data = {}, pairs, pair, separatorIndex, escapedKey, escapedValue, key, value;\r\n        if (queryString === null) {\r\n            return data;\r\n        }\r\n        pairs = queryString.split(\"&\");\r\n        for (var i = 0; i < pairs.length; i++) {\r\n            pair = pairs[i];\r\n            separatorIndex = pair.indexOf(\"=\");\r\n            if (separatorIndex === -1) {\r\n                escapedKey = pair;\r\n                escapedValue = null;\r\n            }\r\n            else {\r\n                escapedKey = pair.substr(0, separatorIndex);\r\n                escapedValue = pair.substr(separatorIndex + 1);\r\n            }\r\n            key = decodeURIComponent(escapedKey);\r\n            value = decodeURIComponent(escapedValue);\r\n            if (key.substr(0, 1) === '/')\r\n                key = key.substr(1);\r\n            data[key] = value;\r\n        }\r\n        return data;\r\n    };\r\n    ;\r\n    OAuthService.prototype.checkAtHash = function (accessToken, idClaims) {\r\n        if (!accessToken || !idClaims || !idClaims.at_hash)\r\n            return true;\r\n        var tokenHash = sha256(accessToken, { asBytes: true });\r\n        var leftMostHalf = tokenHash.slice(0, (tokenHash.length / 2));\r\n        var tokenHashBase64 = base64_js_1.fromByteArray(leftMostHalf);\r\n        var atHash = tokenHashBase64.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\r\n        var claimsAtHash = idClaims.at_hash.replace(/=/g, \"\");\r\n        if (atHash != claimsAtHash) {\r\n            console.warn(\"exptected at_hash: \" + atHash);\r\n            console.warn(\"actual at_hash: \" + claimsAtHash);\r\n        }\r\n        return (atHash == claimsAtHash);\r\n    };\r\n    return OAuthService;\r\n}());\r\nexports.OAuthService = OAuthService;\r\n","/home/travis/build/npmtest/node-npmtest-angular2-oauth2/node_modules/angular2-oauth2/config.js":"System.config({\r\n  baseURL: \"/\",\r\n  defaultJSExtensions: true,\r\n  transpiler: \"none\",\r\n  paths: {},\r\n\r\n  packages: {\r\n    \"oauth2\": {\r\n      \"format\": \"register\",\r\n      \"defaultExtension\": \"js\"\r\n    }\r\n  },\r\n\r\n  map: {\r\n    \"base64-js\": \"node_modules/base64-js/lib/b64.js\",\r\n    \"buffer\": \"node_modules/buffer/index.js\",\r\n    \"convert-hex\": \"node_modules/convert-hex/convert-hex.js\",\r\n    \"convert-string\": \"node_modules/convert-string/convert-string.js\",\r\n    \"ieee754\": \"node_modules/ieee754/index.js\",\r\n    \"isarray\": \"node_modules/isarray/index.js\",\r\n    \"js-base64\": \"node_modules/js-base64/base64.js\",\r\n    \"sha256\": \"node_modules/sha256/lib/sha256.js\"\r\n  }\r\n});\r\n"}